# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ..

# Where to find user code.
#USER_DIR = ../samples
USER_DIR = ../allocator

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -fprofile-arcs -ftest-coverage

#------------------------------------------------------------------------------------------------------------------------
#CFLAGS = -std=c11 -D_GNU_SOURCE -fPIC -Wall -Wextra
CFLAGS = -std=c11 -fprofile-arcs -ftest-coverage  -fPIC -D_GNU_SOURCE -fvisibility=hidden -Wall -Wextra
LDFLAGS = -Wl,--as-needed
LDLIBS = -lpthread
OBJECTS =  $(USER_DIR)/alloc.o $(USER_DIR)/bump.o $(USER_DIR)/chunk.o $(USER_DIR)/extent.o $(USER_DIR)/huge.o $(USER_DIR)/memory.o $(USER_DIR)/mutex.o $(USER_DIR)/purge.o gtest_main.a
BINARIES = alloc.so test_main
#------------------------------------------------------------------------------------------------------------------------

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = sting_allocator

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

#all : $(TESTS)
all : $(BINARIES)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)


# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o: $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a: gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a: gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

#sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
 #                    $(USER_DIR)/sample1.h $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

#sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@




alloc.so: $(OBJECTS)
	$(CC) $(CFLAGS) $(LDFLAGS) -shared $^ $(LDLIBS) -o $@

test_main: $(USER_DIR)/test_main.o $(OBJECTS) 
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) -lpthread $^ -o $@
test_main.o:$(USER_DIR)/test_main.cpp $(USER_DIR)/chunk.h $(USER_DIR)/memory.h $(GTEST_HEADERS)

alloc.o: $(USER_DIR)/alloc.c $(USER_DIR)/arena.h $(USER_DIR)/bump.h $(USER_DIR)/chunk.h $(USER_DIR)/chunk.h $(USER_DIR)/huge.h $(USER_DIR)/memory.h $(USER_DIR)/mutex.h $(USER_DIR)/purge.h $(USER_DIR)/util.h
bump.o: $(USER_DIR)/bump.c $(USER_DIR)/bump.h $(USER_DIR)/chunk.h $(USER_DIR)/memory.h $(USER_DIR)/mutex.h
chunk.o: $(USER_DIR)/chunk.c $(USER_DIR)/chunk.h $(USER_DIR)/extent.h $(USER_DIR)/memory.h $(USER_DIR)/mutex.h
extent.o:$(USER_DIR)/extent.c $(USER_DIR)/bump.h $(USER_DIR)/extent.h $(USER_DIR)/mutex.h
huge.o: $(USER_DIR)/huge.c $(USER_DIR)/arena.h $(USER_DIR)/chunk.h $(USER_DIR)/huge.h $(USER_DIR)/memory.h $(USER_DIR)/purge.h $(USER_DIR)/mutex.h $(USER_DIR)/util.h
memory.o: $(USER_DIR)/memory.c $(USER_DIR)/memory.h
mutex.o: $(USER_DIR)/mutex.c $(USER_DIR)/mutex.h $(USER_DIR)/util.h
purge.o: $(USER_DIR)/purge.c $(USER_DIR)/purge.h

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o
	rm -f $(OBJECTS) $(BINARIES)
	rm -rf *.gcno
	rm -rf *.gcda
	rm -rf *.html
	rm -rf $(USER_DIR)/*.o
	rm -rf $(USER_DIR)/*.gcno
	rm -rf $(USER_DIR)/*.gcda
	rm -rf $(USER_DIR)/*.html
.PHONY: all clean
